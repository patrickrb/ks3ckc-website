generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  // User has registered and verified their email
  ENABLED
  // User has been disabled and can't login anymore
  DISABLED
  // User did register, but has not verified their email yet.
  NOT_VERIFIED
}

model User {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  name           String?       @default("")
  email          String        @unique
  accountStatus  AccountStatus @default(NOT_VERIFIED)
  image          String?       @default("")
  authorizations String[]      @default(["APP"])
  language       String        @default("en")
  lastLoginAt    DateTime?
  callsign       String?       @default("")
  dmrid          Int?
  isPubliclyVisible Boolean    @default(false)
  notes          String?       @db.Text
  blogs          Blogs[]
  news           News[]
  events         Event[]

  @@index([email])
  @@index([callsign])
}

model VerificationToken {
  userId        String
  code          String
  token         String   @unique
  expires       DateTime
  lastAttemptAt DateTime @updatedAt
  attempts      Int      @default(0)
  // Useful to change the user email. This model will contains the next user
  // email, waiting for the user to validate it.
  email         String?
}

model Repository {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  link        String
  description String?
}

model Blogs {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  title         String
  content       String      @db.Text
  featuredImage String?
  tags          String[]    @default([])
  author        User        @relation(fields: [authorId], references: [id])
  authorId      String
  images        BlogImage[]
  
  @@index([authorId])
}

model BlogImage {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  filename    String
  originalName String
  blobUrl     String
  blobName    String
  mimeType    String
  size        Int
  blog        Blogs    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId      String
  
  @@index([blogId])
}

model News {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  content     String   @db.Text
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  
  @@index([authorId])
}

model Event {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  date          DateTime
  startTime     String?
  endTime       String?
  location      String?
  address       String?
  mapUrl        String?
  embedMapUrl   String?
  description   String?   @db.Text
  isActive      Boolean   @default(true)
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  
  @@index([authorId])
  @@index([date])
}